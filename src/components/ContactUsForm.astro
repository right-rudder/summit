---

---

<form
  class="mx-auto max-w-xl pb-10"
  method="POST"
  id="contact_form"
  action=""
  data-astro-reload
>
  <div class="grid grid-cols-1 gap-x-8 gap-y-2 sm:grid-cols-2">
    <div>
      <!-- <label for="first-name" class="block text-sm leading-6 text-white">First name</label> -->
      <div class="mt-2.5">
        <input
          type="text"
          name="first-name"
          id="first-name"
          autocomplete="given-name"
          placeholder="First Name"
          required
          class="block w-full py-2 text-white shadow-sm ring-inset ring-gray-300 placeholder:text-gray-300 bg-transparent border-b-[1px] border-gray-300 sm:text-sm sm:leading-6 outline-none"
        />
      </div>
    </div>
    <div>
      <!-- <label for="last-name" class="block text-sm leading-6 text-white">Last name</label> -->
      <div class="mt-2.5">
        <input
          type="text"
          name="last-name"
          id="last-name"
          autocomplete="family-name"
          placeholder="Last Name"
          required
          class="block w-full py-2 text-white shadow-sm ring-inset ring-gray-300 placeholder:text-gray-300 bg-transparent border-b-[1px] border-gray-300 sm:text-sm sm:leading-6 outline-none"
        />
      </div>
    </div>
    <div class="sm:col-span-2">
      <!-- <label for="email" class="block text-sm leading-6 text-white">Email</label> -->
      <div class="mt-2.5">
        <input
          type="email"
          name="email"
          id="email"
          autocomplete="email"
          placeholder="Email Address"
          required
          class="block w-full py-2 text-white shadow-sm ring-inset ring-gray-300 placeholder:text-gray-300 bg-transparent border-b-[1px] border-gray-300 sm:text-sm sm:leading-6 outline-none"
        />
      </div>
    </div>
    <p class="ohno">
      <label>
        Don't fill this out if you're human: <input name="confirm-email" />
      </label>
    </p>
    <div class="sm:col-span-2">
      <!-- <label for="phone-number" class="block text-sm leading-6 text-white">Phone number</label> -->
      <div class="relative mt-2.5">
        <input
          type="tel"
          name="phone-number"
          id="phone-number"
          autocomplete="tel"
          placeholder="Phone Number"
          required
          class="block w-full py-2 text-white shadow-sm ring-inset ring-gray-300 placeholder:text-gray-300 bg-transparent border-b-[1px] border-gray-300 sm:text-sm sm:leading-6 outline-none"
        />
      </div>
    </div>
    <div class="sm:col-span-2">
      <!-- <label for="message" class="block text-sm leading-6 text-white">How can we help?</label> -->
      <div class="mt-2.5">
        <!-- Need to get align bottom... -->
        <textarea
          name="message"
          id="message"
          rows="4"
          placeholder="How can we help?"
          required
          class="block w-full py-2 text-white shadow-sm ring-inset ring-gray-300 placeholder:text-gray-300 bg-transparent border-b-[1px] border-gray-300 sm:text-sm sm:leading-6 outline-none"
        ></textarea>
      </div>
    </div>
    <div class="flex gap-x-4 sm:col-span-2">
      <div x-data="{ isChecked: false }" class="flex h-6 items-center">
        <!-- Enabled: "bg-gray-900", Not Enabled: "bg-gray-200" -->
        <button
          type="button"
          x-bind:class="{ 'bg-gray-900': isChecked, 'bg-gray-200': !isChecked }"
          x-on:click="isChecked = !isChecked"
          class="flex w-8 flex-none cursor-pointer rounded-full p-px ring-1 ring-inset ring-gray-900/5 transition-colors duration-200 ease-in-out focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-gray-900"
          role="switch"
          aria-checked="false"
          aria-labelledby="switch-1-label"
        >
          <span class="sr-only"
            >I agree to terms & conditions provided by the company. By providing
            my phone number, I agree to receive text messages from the business.</span
          >
          <!-- Enabled: "translate-x-3.5", Not Enabled: "translate-x-0" -->
          <span
            x-bind:class="{ 'translate-x-3.5': isChecked, 'translate-x-0': !isChecked }"
            aria-hidden="true"
            class="h-4 w-4 transform rounded-full bg-white shadow-sm ring-1 ring-gray-900/5 transition duration-200 ease-in-out"
          ></span>
        </button>
        <input
          type="hidden"
          x-bind:value="isChecked ? 'yes' : 'no'"
          name="agree-terms"
        />
      </div>
      <label class="text-sm leading-6 text-gray-200" id="switch-1-label">
        I agree to <a href="">terms & conditions</a> provided by the company. By
        providing my phone number, I agree to receive text messages from the business.
      </label>
    </div>
  </div>
  <div class="mt-10">
    <button type="submit" class="btn-black">Contact Us</button>
  </div>
</form>

<script>
  // Wait for the DOM content to be fully loaded
  document.addEventListener("DOMContentLoaded", function () {
    // Get the contact form element
    const contactForm = document.getElementById(
      "contact_form",
    ) as HTMLFormElement;

    // Check if the contact form element exists
    if (contactForm !== null) {
      // Add submit event listener to the contact form
      contactForm.addEventListener("submit", function (event) {
        // Prevent the default form submission
        event.preventDefault();

        // Serialize the form data
        const formData = new FormData(contactForm);

        // Check the value of the honeypot field
        const confirmEmailValue = formData.get("confirm-email");
        if (confirmEmailValue === "" || confirmEmailValue === null) {
          // If the honeypot field is empty, it's a human
          // Set the form action to the URL for processing the form and redirecting to thank you
          contactForm.action =
            "https://services.leadconnectorhq.com/hooks/6Qxcfy0WWndWLURxYvBB/webhook-trigger/b753d9d9-1a9d-465f-84d0-31b0d9822501";
        }

        // Convert FormData to URLSearchParams
        const urlSearchParams = new URLSearchParams();
        for (const pair of formData.entries()) {
          urlSearchParams.append(pair[0], pair[1] as string);
        }

        // Send an AJAX request to submit the form
        const xhr = new XMLHttpRequest();
        xhr.open("POST", contactForm.action);
        xhr.setRequestHeader(
          "Content-Type",
          "application/x-www-form-urlencoded",
        );
        xhr.onload = function () {
          // Check if the request was successful (status 200)
          if (xhr.status === 200) {
            // Redirect the user after a successful form submission
            window.location.href = "/contact-confirmation";
          } else {
            // Handle errors if any
            console.error("Form submission failed:", xhr.statusText);
          }
        };
        xhr.onerror = function () {
          // Handle network errors
          console.error("Network error occurred while submitting the form.");
        };
        xhr.send(urlSearchParams);
      });
    } else {
      console.error("Contact form element not found.");
    }
  });
</script>

<style>
  .ohno {
    @apply hidden;
  }
</style>
